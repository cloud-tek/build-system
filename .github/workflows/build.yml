name: build build-system

env:
  NETCORE_VERSION: 6.0.100
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  DOTNET_ROLL_FORWARD: Major
on:
  pull_request:
    types:
    - opened
    - reopened
    - synchronize
    - edited
    - closed
    branches:
    - main
    paths:
      - ".github/workflows/build.yml"
      - "build/**"
      - "build-system/**"
  workflow_dispatch:
    inputs: {}

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'
    - name: setup gitversion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.x'
    - name: dotnet tool restore
      run: dotnet tool restore
      shell: bash
    - uses: actions/setup-dotnet@v1
      name: dotnet installer
      with:
        dotnet-version: ${{ env.NETCORE_VERSION }}
    - name: check pull_request.head.ref
      if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged }}
      run: |
        BRANCH="${{ github.event.pull_request.head.ref }}"
        if [[ $BRANCH =~ (release\/)([0-9]+\.[0-9]+)(\.[0-9]+)? ]]
        then
          echo "::set-env name=version::${BASH_REMATCH[2]}"
        fi
      shell: bash
    - name: tag (pull_request.head.ref)
      if: ${{ env.version != null }}
      uses: anothrNick/github-tag-action@1.26.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: false
        RELEASE_BRANCHES: main
        INITIAL_VERSION: 0.1.0
        CUSTOM_TAG: ${{ env.version }}
        VERBOSE: true
    # - name: gitversion
    #   shell: bash
    #   if: always()
    #   working-directory: ${{ github.workspace }}
    #   run: |
    #    dotnet gitversion
    - name: giversion
      id:   gitversion
      uses: gittools/actions/gitversion/execute@v0.9.7
    - name: Display GitVersion outputs
      run: |
        echo "Major: ${{ steps.gitversion.outputs.major }}"
        echo "Minor: ${{ steps.gitversion.outputs.minor }}"
        echo "Patch: ${{ steps.gitversion.outputs.patch }}"
        echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
        echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
        echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
        echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
        echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
        echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
        echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
        echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
        echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
        echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
        echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
        echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
        echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
        echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
        echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
        echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
        echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
        echo "Sha: ${{ steps.gitversion.outputs.sha }}"
        echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
        echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
        echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
        echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
        echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
        echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
        echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
        echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
        echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"
    #
    - id: buld-system
      if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed') }}
      uses: cloud-tek/actions/build-system@v0.6
      name: build-system
      with:
        directory: ${{ github.workspace }}
        Compile:      'true'
        Pack:         'true'
        Push:         'true'
        NuGetApiUrl:  'https://nuget.pkg.github.com/cloud-tek/index.json'
        NuGetApiKey:  '${{ secrets.GH_PAT }}'
    - id: buld-system-pr
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}
      uses: cloud-tek/actions/build-system@v0.6
      name: build-system (pr)
      with:
        directory: ${{ github.workspace }}
        Compile:      'true'
    - name: gitversion
      shell: bash
      if: always()
      working-directory: ${{ github.workspace }}
      run: |
       dotnet gitversion
    - name: diag
      shell: bash
      if: always()
      working-directory: ${{ github.workspace }}
      run: |
        echo Hi ${{ github.actor }}
        echo ${{ github.event_name }}
        echo ${{ github.event.action }}
        echo ${{ github.event.pull_request.merged }}
        apt update && apt install tree --yes
        tree